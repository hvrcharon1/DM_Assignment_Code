# -*- coding: utf-8 -*-
"""DS-1 v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K7Met8b0OwM44LmnTiN5mINqVp4beFFG

author: @harshalrasal
"""

import os
os.getcwd()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import MinMaxScaler
from scipy.stats import norm,  gaussian_kde
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline



#Uploading the dataset
data=np.loadtxt('dist1_500_1.txt')
data1=np.loadtxt('dist1_500_2.txt')

#Concatenating both files of data
result = np.concatenate([data,data1], axis=0)

result.shape

#plotting the histogram of all data
plt.hist(result)



#Select any 10 random data_rescaled
data_rescaled=result[np.random.choice(1000,10),:]
data_rescaled.shape

# #Normalizing the values vbertween 0 and 1 
# scaler = MinMaxScaler(feature_range=[0, 1])
# data_rescaled = scaler.fit_transform(result)

print( " Dateset 1 : \n ")
for i in range(10):
    print("Sample : " + str(i+1) + " Mean : " + str(np.mean(data_rescaled[i])) + " STD : ", np.std(data_rescaled[i]))

"""# Task 1"""

#Plotting tthe distribution
n = 10000
ax = sns.distplot(data_rescaled[0],
                  bins=100,
                  kde=True,
                  color='skyblue',
                  hist_kws={"linewidth": 15,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[1],
                  bins=100,
                  kde=True,
                  color='skyblue',
                  hist_kws={"linewidth": 15,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[2],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[3],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[4],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[5],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[6],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[7],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[8],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')

ax = sns.distplot(data_rescaled[8],
              bins=100,
              kde=True,
              color='skyblue',
              hist_kws={"linewidth": 30,'alpha':1})
ax.set(xlabel='Gaussian Distribution ', ylabel='Frequency')



"""# Task 2 and 3"""

#Fitting the PCA algorithm with our Data
pca = PCA().fit(result)
#Plotting the Cumulative Summation of the Explained Variance
plt.figure()
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('Number of Components')
plt.ylabel('Variance (%)') #for each component
plt.title('Dataset Explained Variance')
plt.show()

#Takig 90 compenents as we can preserve over 90% of data using it  
pca = PCA(n_components=90)
dataset = pca.fit_transform(result)

plt.hist(dataset)

plt.hist(result)



from scipy.fftpack import dct

dict=dct(result)

plt.hist(dict)

"""# Task 4"""

from sklearn.decomposition import FastICA
transformer = FastICA(n_components=90,random_state=0)
data_transformed = transformer.fit_transform(result)

plt.hist(data_transformed)







